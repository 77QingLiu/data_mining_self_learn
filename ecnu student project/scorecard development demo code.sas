
* this is a demo code to show how to develop a scorecard using SAS;

* three datasets are available:  modeling, validation and psi;
* these fake datasets were generated by "fake data generation.sas";


* set the main working directory (also where the datasets are saved) first;
libname score "D:\研究生课程\商业数据分析\评分卡\student project";

%include "D:\研究生课程\商业数据分析\student project\public macro\fine class.sas";
%include "D:\研究生课程\商业数据分析\student project\public macro\model run.sas";
%include "D:\研究生课程\商业数据分析\student project\public macro\ks_logodds_psi.sas";


*****************************************************************
*****************************************************************
*****************************************************************
*****************************************************************
**************   PART I : Model Development  ********************
*****************************************************************
*****************************************************************
*****************************************************************
*****************************************************************


********************************************************************************************;
**********************************  Step 1: Data Analysis **********************************;
********************************************************************************************;
*read the demo and buro datasets;
data baseline;
	set score.modeling_demo;
run;

data buro;
	set score.modeling_buro;
run;

*delete missing value of id in buro;
data buro;
   set buro;
   if id = '*' then delete;
run;
 
*merge baseline and buro;
proc sort data = baseline; by id; run;
proc sort data = buro ; by id ; run;

data model;
   merge baseline buro;
   by id;
run;

data score.scoremodel;
   set model;
   if debtratio = '.' then delete;
run;

*参照粗分区结果将年龄分区，以便对income缺失值插补;
data temp;
	set score.scoremodel;
	if age>= 21 and age <= 35 then do age2 = 1;end;
	else if age >= 36 and age <= 47 then do age2 = 2; end;
	else if age >=48 and age <= 54 then do age2 = 3;end;
	else if age >=55 and age <= 62 then do age2 = 4;end;
	else if age >=63 and age <= 67 then do age2 = 5;end;
	else if age >=68 and age <= 109 then do age2 = 6;end;
run;

* check the basic contents of the data;
proc contents data=temp; run;

* for continous variables, check the percentiles;
proc univariate 
   data=temp;
   var age income dependent debtratio utilization num_line num_loan del_30 del_60 del_90;
   output out=N      N=v1-v10;
   output out=NMISS  NMISS=v1-v10;
   output out=MIN    MIN=v1-v10;
   output out=MAX    MAX=v1-v10;
   output out=MEAN   MEAN=v1-v10;
   output out=STD    STD=v1-v10;
   output out=P5     P5=v1-v10;
   output out=P10    P10=v1-v10;
   output out=Q1     Q1=v1-v10;
   output out=MEDIAN MEDIAN=v1-v10;
   output out=Q3     Q3=v1-v10;
   output out=P90    P90=v1-v10;
   output out=P95    P95=v1-v10;
run;

data data_analysis; set N NMISS MIN MAX MEAN STD P5 P10 Q1 MEDIAN Q3 P90 P95; run;
proc print data=data_analysis;run;

* for categorical variables, check the frequencies;
proc freq data=temp; tables gender; run;


* output the data analysis results into "working sheet.xls";
* check the results carefully, especially for missing data, unreasonable results etc;

* deal with missing data & unreasonable data;
proc sort data = temp ; by age2; run;
proc means data=temp; where income>.; var income;by age2; run;

*按年龄分组插补缺失值;
data temp; 
  set temp; 
  if income=. and age2 =1 then do income = 4198.25; end;
  else if income = . and age2 = 2 then do income = 6858.67;end;
  else if income = . and age2 = 3 then do income = 7918.69;end;
  else if income = . and age2 = 4 then do income = 7559.47;end;
  else if income = . and age2 = 5 then do income = 7356.98;end;
  else if income = . and age2 = 6 then do income = 5779.12;end;
run;

data temp; 
  set temp;
  if del_30 = 96 | del_30 = 98 then del_30 =.;
  if del_60 = 96 | del_60 = 98 then del_60 =.;
  if del_90 = 96 | del_90 = 98 then del_90 =.;
 run;

* default coding;
* 利用num_line 进行特殊编码;
data temp;
  set temp;
  if num_line=0 then debtratio=.;
  if num_line=0 then utilization=.;
  if num_line=0 then del_30=.;
  if num_line=0 then del_60=.;
  if num_line=0 then del_90=.;
run;

* run the previous data anlaysis code again to get the data analysis results for the updated data;
* again output the data analysis results into "working sheet.xls";

* rename the variable names for convenience;
data temp;
   set temp;
   rand=rand('Uniform');
   rename
   gender = v01
   age = v02   
   income = v03
   dependent = v04
   debtratio = v05
   utilization = v06
   num_line = v07
   num_loan = v08
   del_30 = v09
   del_60 = v10
   del_90 = v11
   ;
run;

* split the data into development sample and holdout sample;
data score.develop; set temp; where rand<0.7; drop rand; run;
data score.holdout; set temp; where rand>=0.7; drop rand; run;

proc sort data = temp; by bad; run;
proc freq data = temp; where v03 > 0 and v03 <1499 ; tables v03;by bad; run;
********************************************************************************************;
**********************************  Step 2: Fine Classing **********************************;
********************************************************************************************;

data develop; set score.develop; good=1-bad; run;
proc contents data=develop; run;

* run "fine_class.sas" first to get the fine class macros;
%fine_class(intable=develop, classvar=v02);
%fine_class(intable=develop, classvar=v03);
%fine_class(intable=develop, classvar=v04, missingval=.);
%fine_class(intable=develop, classvar=v05, missingval=.);
%fine_class(intable=develop, classvar=v06, missingval=.);
%fine_class(intable=develop, classvar=v07);
%fine_class(intable=develop, classvar=v08, missingval=.);
%fine_class(intable=develop, classvar=v09, missingval=.);
%fine_class(intable=develop, classvar=v10, missingval=.);
%fine_class(intable=develop, classvar=v11, missingval=.);

%x_class(intable=develop, classvar=v01);

* save the results into tab "fine-coarse class" in "working sheet.xls" from column A to column R (Delete column T to column BL first!!).
* check the comment in cell R1;

********************************************************************************************;
**********************************  Step 3: Coarse Classing ********************************;
********************************************************************************************;

* copy column T to column BL from "fine coarse class.xls" to the tab "fine-coarse class" in "working sheet.xls";
* manually input the cell T3 (total number of samples in develop data), T5 (# of goods) and T7 (# of bads);
* DO NOT change ANYTHING from column T to column BL otherwise;
* coarse class is done in the "working sheet.xls", tab "fine-coarse class", column S (check the comment in cell S1);


* calculate WOE using the SAS codes generated in the working sheet;
* be careful that, when the variable is categorical or have missing data, we need to adjust the codes manually;

data develop;
   set score.develop;

if					v02	<=	35	then	w02=	-0.5467 	;
if	v02	>	35	and	v02	<=	43	then	w02=	-0.3219 	;
if	v02	>	43	and	v02	<=	51	then	w02=	-0.1997 	;
if	v02	>	51	and	v02	<=	57	then	w02=	-0.0193 	;
if	v02	>	57	and	v02	<=	67	then	w02=	0.4824 	;
if					v02	>	67	then	w02=	1.2462 	;

if					v03	<=	1499	then	w03=	0.0180 	;
if	v03	>	1499	and	v03	<=	2899	then	w03=	-0.4424 	;
if	v03	>	2899	and	v03	<=	4899	then	w03=	-0.3061 	;
if	v03	>	4899	and	v03	<=	6599	then	w03=	-0.0435 	;
if	v03	>	6599	and	v03	<=	9455	then	w03=	0.2394 	;
if					v03	>	9455	then	w03=	0.4415 	;

if					v04	 =  .	then	w04=	0.1646 	;
if	v04	>	.	and	v04	<=	1	then	w04=	-0.1083 	;
if	v04	>	1	and	v04	<=	3	then	w04=	-0.2561 	;
if					v04	>	3	then	w04=	-0.5335 	;

if					v05  =  .	then	w05=	-1.2817 	;
if	v05	>	.	and	v05	<=	0.005988	then	w05=	1.2283 	;
if	v05	>	0.005988	and	v05	<=	0.33307	then	w05=	0.1434 	;
if	v05	>	0.33307	and	v05	<=	0.55651	then	w05=	-0.0572 	;
if	v05	>	0.55651	and	v05	<=	12.5	then	w05=	-0.5006 	;
if					v05	>	12.5	then	w05=	0.2169 	;

if					v06	 =	.	then	w06=	-1.2817 	;
if	v06	>	.	and	v06	<=	0.059697	then	w06=	1.3650 	;
if	v06	>	0.059697	and	v06	<=	0.151662	then	w06=	1.0867 	;
if	v06	>	0.151662	and	v06	<=	0.444169	then	w06=	0.4746 	;
if	v06	>	0.444169	and	v06	<=	0.852049	then	w06=	-0.5332 	;
if					v06	>	0.852049	then	w06=	-1.3443 	;

if					v07	<=	1	then	w07=	-0.8810 	;
if	v07	>	1	and	v07	<=	3	then	w07=	-0.2689 	;
if	v07	>	3	and	v07	<=	5	then	w07=	0.0299 	;
if	v07	>	5	and	v07	<=	8	then	w07=	0.2447 	;
if	v07	>	8	and	v07	<=	14	then	w07=	0.1268 	;
if					v07	>	14	then	w07=	-0.1347 	;

if					v08  =	.	then	w08=	-1.2817 	;
if	            	v08	 =	0	then	w08=	-0.1845 	;
if	v08	>	0	and	v08	<=	2	then	w08=	0.2218 	;
if					v08	>	2	then	w08=	-0.2278 	;

if					V09	 =	.	then	w09=	-1.2817 	;
if	            	V09	 =	0	then	w09=	0.5728 	;
if	V09	>	0	and	V09	<=	1	then	w09=	-0.9130 	;
if					V09	>	1	then	w09=	-1.8673 	;

if					V10	 =	.	then	w10=	-1.2817 	;
if	            	V10	 =	0	then	w10=	0.3000 	;
if					V10	>	0	then	w10=	-2.0552 	;

if					V11	 =	.	then	w11=	-1.2817 	;
if	               	V11	 =	0	then	w11=	0.3843 	;
if					V11	>	0	then	w11=	-2.3016 	;

if              v01 = "Female"  then w01=  0.2419 ; else w01=-0.1846 ;
run;



* apply exactly the code to holdout sample to get WOE;
data holdout;
   set score.holdout;

if					v02	<=	35	then	w02=	-0.5467 	;
if	v02	>	35	and	v02	<=	43	then	w02=	-0.3219 	;
if	v02	>	43	and	v02	<=	51	then	w02=	-0.1997 	;
if	v02	>	51	and	v02	<=	57	then	w02=	-0.0193 	;
if	v02	>	57	and	v02	<=	67	then	w02=	0.4824 	;
if					v02	>	67	then	w02=	1.2462 	;

if					v03	<=	1499	then	w03=	0.0180 	;
if	v03	>	1499	and	v03	<=	2899	then	w03=	-0.4424 	;
if	v03	>	2899	and	v03	<=	4899	then	w03=	-0.3061 	;
if	v03	>	4899	and	v03	<=	6599	then	w03=	-0.0435 	;
if	v03	>	6599	and	v03	<=	9455	then	w03=	0.2394 	;
if					v03	>	9455	then	w03=	0.4415 	;

if					v04	 =  .	then	w04=	0.1646 	;
if	v04	>	.	and	v04	<=	1	then	w04=	-0.1083 	;
if	v04	>	1	and	v04	<=	3	then	w04=	-0.2561 	;
if					v04	>	3	then	w04=	-0.5335 	;

if					v05  =  .	then	w05=	-1.2817 	;
if	v05	>	.	and	v05	<=	0.005988	then	w05=	1.2283 	;
if	v05	>	0.005988	and	v05	<=	0.33307	then	w05=	0.1434 	;
if	v05	>	0.33307	and	v05	<=	0.55651	then	w05=	-0.0572 	;
if	v05	>	0.55651	and	v05	<=	12.5	then	w05=	-0.5006 	;
if					v05	>	12.5	then	w05=	0.2169 	;

if					v06	 =	.	then	w06=	-1.2817 	;
if	v06	>	.	and	v06	<=	0.059697	then	w06=	1.3650 	;
if	v06	>	0.059697	and	v06	<=	0.151662	then	w06=	1.0867 	;
if	v06	>	0.151662	and	v06	<=	0.444169	then	w06=	0.4746 	;
if	v06	>	0.444169	and	v06	<=	0.852049	then	w06=	-0.5332 	;
if					v06	>	0.852049	then	w06=	-1.3443 	;

if					v07	<=	1	then	w07=	-0.8810 	;
if	v07	>	1	and	v07	<=	3	then	w07=	-0.2689 	;
if	v07	>	3	and	v07	<=	5	then	w07=	0.0299 	;
if	v07	>	5	and	v07	<=	8	then	w07=	0.2447 	;
if	v07	>	8	and	v07	<=	14	then	w07=	0.1268 	;
if					v07	>	14	then	w07=	-0.1347 	;

if					v08  =	.	then	w08=	-1.2817 	;
if	            	v08	 =	0	then	w08=	-0.1845 	;
if	v08	>	0	and	v08	<=	2	then	w08=	0.2218 	;
if					v08	>	2	then	w08=	-0.2278 	;

if					V09	 =	.	then	w09=	-1.2817 	;
if	            	V09	 =	0	then	w09=	0.5728 	;
if	V09	>	0	and	V09	<=	1	then	w09=	-0.9130 	;
if					V09	>	1	then	w09=	-1.8673 	;

if					V10	 =	.	then	w10=	-1.2817 	;
if	            	V10	 =	0	then	w10=	0.3000 	;
if					V10	>	0	then	w10=	-2.0552 	;

if					V11	 =	.	then	w11=	-1.2817 	;
if	               	V11	 =	0	then	w11=	0.3843 	;
if					V11	>	0	then	w11=	-2.3016 	;

if              v01 = "Female"  then w01=  0.2419 ; else w01=-0.1846 ;
run;

* combine develop and holdout together, but use variable 'dev' to mark.  DO NOT change the variable name of 'dev';
data develop; set develop; dev=1; run;
data holdout; set holdout; dev=0; run;

data total;
   set develop holdout;
run;

********************************************************************************************;
**********************************  Step 4: Model Selection ********************************;
********************************************************************************************;

* set the scaling parameters; 
%let base=200;
%let odds=0.05;
%let pdo=50;

%let factor=&pdo/log(2);
%let offset=&base-&pdo*log(&odds)/log(2);

* run "ks_logodds_psi.sas" and "modelrun.sas" first to get the macros; 
* specify variable list before each run of %modelrun; 

* start with all the variables to get M1;
%let varlist=%str(w01 - w011);
%modelrun(dataset=total; badvar=bad, var=&varlist);
* output the results to tab "M1" in the working sheet; 
* check the results carefully to decide what variable to delete;

* delete w04 to get M2;
%let varlist=%str(w02 w03 w05 w07);
%modelrun(dataset=total; badvar=bad, var=&varlist);

* M2 is the final model in this example;


********************************************************************************************;
**********************************  Step 5: Scorecard output *******************************;
********************************************************************************************;

* the scorecard calculation is done in "working sheet.xls";

* check if the scorecard formular generated in "working sheet.xls" is correct;

%macro newscore;
 3*(v02<=23.02476)
+54*(23.02476<v02<=29.29574)
+93*(29.29574<v02<=34.69032)
+136*(34.69032<v02<=38.76083)
+175*(38.76083<v02<=44.54479)
+210*(44.54479<v02<=54.70021)
+284*(54.70021<v02)
+64*(v03<=8352.048)
+100*(8352.048<v03<=9332.556)
+129*(9332.556<v03<=10025.46)
+151*(10025.46<v03<=10858.41)
+165*(10858.41<v03<=11303.93)
+206*(11303.93<v03)
+107*(v05<=.)
+142*(.<v05<=0.2638)
+137*(0.2638<v05<=0.4721)
+135*(0.4721<v05<=0.6342)
+131*(0.6342<v05)
+31*(v07=.)
+233*(v07=0)
+163*(v07=1)
+95*(v07=2)
+22*(2<v07)
%mend;


data out_total;
  set out_total;
  newscore=%newscore;
  diff = score-newscore;
run;

proc sort data=out_total; by diff; run;

********************************************************************************************;
**********************************  Step 6: Model Validation *******************************;
*************************  KS on validate sample, Score Dist, Log-Odds *********************;
********************************************************************************************;

data validation; set score.validation; run;

* modify the data exactly as what we have done on modeling data;
* but we can ignore the variables not appear in the scorecard;

data validation;
  set validation;

  if del_30 = 96 | del_30 = 98 then del_30 =.;
  if del_60 = 96 | del_60 = 98 then del_60 =.;
  if del_90 = 96 | del_90 = 98 then del_90 =.;

  if age>= 21 and age <= 35 then do age2 = 1;end;
  else if age >= 36 and age <= 47 then do age2 = 2; end;
  else if age >=48 and age <= 54 then do age2 = 3;end;
  else if age >=55 and age <= 62 then do age2 = 4;end;
  else if age >=63 and age <= 67 then do age2 = 5;end;
  else if age >=68 and age <= 109 then do age2 = 6;end;

  if num_line=0 then debtratio=.;
  if num_line=0 then utilization=.;
  if num_line=0 then del_30=.;
  if num_line=0 then del_60=.;
  if num_line=0 then del_90=.;

   rename
   gender = v01
   age = v02   
   income = v03
   dependent = v04
   debtratio = v05
   utilization = v06
   num_line = v07
   num_loan = v08
   del_30 = v09
   del_60 = v10
   del_90 = v11
   ;
run;

proc sort data = validation ; by age2; run;
proc means data= validation;  where v03 > .; var v03; by age2; run;

data validation;
  set validation;
  if income=. and age2 =1 then do income = 4314.04; end;
  else if income = . and age2 = 2 then do income = 6783.37;end;
  else if income = . and age2 = 3 then do income = 7612.19;end;
  else if income = . and age2 = 4 then do income = 7637.29;end;
  else if income = . and age2 = 5 then do income = 7296.37;end;
  else if income = . and age2 = 6 then do income = 5827.34;end;
run;


* score the validation sample;
data validation;
   set validation;
   newscore=%newscore;
run;

* check the KS for validation sample;
%KS1(validation,bad,10,newscore)

data out_develop; set out_total; where dev=1; run;
data out_holdout; set out_total; where dev=0; run;

%logodds(out_develop,bad,20,newscore)

%macro logodds1(dataset,bad,group,score);   
data &dataset; 
   set &dataset;
   select; 
   when (&score <= 241) rank = 0;
   when (&score <= 277) rank = 1;
   when (&score <= 316) rank = 2;
   when (&score <= 348) rank = 3;
   when (&score <= 381) rank = 4;
   when (&score <= 413) rank = 5;
   when (&score <= 445) rank = 6;
   when (&score <= 477) rank = 7;
   when (&score <= 510) rank = 8;
   when (&score <= 542) rank = 9;
   when (&score <= 574) rank = 10;
   when (&score <= 606) rank = 11;
   when (&score <= 639) rank = 12;
   when (&score <= 671) rank = 13;
   when (&score <= 703) rank = 14;
   when (&score <= 735) rank = 15;
   when (&score <= 759) rank = 16;
   when (&score <= 799) rank = 17;
   when (&score <= 824) rank = 18;
   otherwise rank = 19;
   end;
run;

proc means data=&dataset nway noprint missing;
   class rank;
   var &score &bad;
   output out=outs min(&score)=min max(&score)=max sum(&bad)=bad_;
run;

data outs; set outs; good=_freq_-bad_; sim = '~'; run;
data outs; retain min sim max _freq_ good bad_; set outs; run;
ods html file='D:log_odds.xls';
	proc print data=outs;run;
ods html close;
%mend;

%logodds1(out_holdout,bad,20,newscore)

%logodds1(out_total,bad,20,newscore)

%logodds1(validation,bad,20,newscore)


********************************************************************************************;
**********************************  Step 7: PSI Check **************************************;
********************************************************************************************;

%PSI(out_total,20,newscore)

%macro PSI1(dataset,group,score);   
data &dataset; 
   set &dataset;
   select; 
   when (&score <= 391) rank = 0;
   when (&score <= 435) rank = 1;
   when (&score <= 463) rank = 2;
   when (&score <= 487) rank = 3;
   when (&score <= 503) rank = 4;
   when (&score <= 522) rank = 5;
   when (&score <= 539) rank = 6;
   when (&score <= 557) rank = 7;
   when (&score <= 569) rank = 8;
   when (&score <= 581) rank = 9;
   when (&score <= 598) rank = 10;
   when (&score <= 609) rank = 11;
   when (&score <= 626) rank = 12;
   when (&score <= 638) rank = 13;
   when (&score <= 650) rank = 14;
   when (&score <= 668) rank = 15;
   when (&score <= 682) rank = 16;
   when (&score <= 709) rank = 17;
   when (&score <= 735) rank = 18;
   otherwise rank = 19;
   end;
run;

ods html;
proc freq data=&dataset; tables rank; run;
ods html close;

%mend;


%PSI1(validation,20,newscore);


data psi; set score.psi; run;

* modify the data exactly as what we have done on modeling data;
* but we can ignore the variables not appear in the scorecard;

data psi;
   set psi;

  if del_30 = 96 | del_30 = 98 then del_30 =.;
  if del_60 = 96 | del_60 = 98 then del_60 =.;
  if del_90 = 96 | del_90 = 98 then del_90 =.;

  if age>= 21 and age <= 35 then do age2 = 1;end;
  else if age >= 36 and age <= 47 then do age2 = 2; end;
  else if age >=48 and age <= 54 then do age2 = 3;end;
  else if age >=55 and age <= 62 then do age2 = 4;end;
  else if age >=63 and age <= 67 then do age2 = 5;end;
  else if age >=68 and age <= 109 then do age2 = 6;end;

  if num_line=0 then debtratio=.;
  if num_line=0 then utilization=.;
  if num_line=0 then del_30=.;
  if num_line=0 then del_60=.;
  if num_line=0 then del_90=.;

   rename
   gender = v01
   age = v02   
   income = v03
   dependent = v04
   debtratio = v05
   utilization = v06
   num_line = v07
   num_loan = v08
   del_30 = v09
   del_60 = v10
   del_90 = v11
   ;   ;
run;

proc sort data = psi ; by age2; run;
proc means data= psi;  where v03 > .; var v03; by age2; run;

data validation;
  set validation;
  if income=. and age2 =1 then do income = 4172.70; end;
  else if income = . and age2 = 2 then do income = 6918.23;end;
  else if income = . and age2 = 3 then do income = 7328.77;end;
  else if income = . and age2 = 4 then do income = 7809.12;end;
  else if income = . and age2 = 5 then do income = 7785.18;end;
  else if income = . and age2 = 6 then do income = 6522.96;end;
run;


data psi;
   set psi;
   newscore=%newscore;
run;

%PSI1(psi,20,newscore);

* Charateristics Analysis;

data psi;
  set psi;

  if v02<=23.02476 then r02=1;
  if 23.02476<v02<=29.29574 then r02=2;
  if 29.29574<v02<=34.69032 then r02=3;
  if 34.69032<v02<=38.76083 then r02=4;
  if 38.76083<v02<=44.54479 then r02=5;
  if 44.54479<v02<=54.70021 then r02=6;
  if 54.70021<v02 then r02=7;

  if v03<=8352.048 then r03=1;
  if 8352.048<v03<=9332.556 then r03=2;
  if 9332.556<v03<=10025.46 then r03=3;
  if 10025.46<v03<=10858.41 then r03=4;
  if 10858.41<v03<=11303.93 then r03=5;
  if 11303.93<v03 then r03=6;

  if v05<=. then r05=1;
  if .<v05<=0.2638 then r05=2;
  if 0.2638<v05<=0.4721 then r05=3;
  if 0.4721<v05<=0.6342 then r05=4;
  if 0.6342<v05 then r05=5;

  if v07=. then r07=1;
  if v07=0 then r07=2;
  if v07=1 then r07=3;
  if v07=2 then r07=4;
  if 2<v07 then r07=5;

run;

ods html;
proc freq data=psi;
  tables
  r02
  r03
  r05
  r07
  ;
run;
ods html close;



